extern _malloc

section .text

global	_ft_strdup

;======================================================================
_ft_strdup:
;	reserve registers
;----------------------------------------------------------------------
	push		r13
	push		r14
;----------------------------------------------------------------------
;	get the size of str and store it in r13
;----------------------------------------------------------------------
	call		_ft_strlen
	inc			rax
	mov			r13, rax
;----------------------------------------------------------------------

;	allocate size bytes and store the pointer in r14
;----------------------------------------------------------------------
	push		rdi
	mov			rdi, r13

;	align the stack
;----------------------------------------------------------------------
	push		r12
	call		_get_alignment_offset
	mov			r12, rax
	sub			rsp, rax
;----------------------------------------------------------------------

	call		_malloc

;	restore the stack state before adjustement
;----------------------------------------------------------------------
	add			rsp, r12
	pop			r12
;----------------------------------------------------------------------

	pop			rdi
	jc			_manage_allocation_failure
;----------------------------------------------------------------------

;	copy str in the allocated region
;----------------------------------------------------------------------
	mov			rsi, rdi
	mov			rdi, rax
	call		_ft_strcpy
;----------------------------------------------------------------------

;	restore the reserved registers and return
;----------------------------------------------------------------------
	pop			r14
	pop			r13
	ret
;----------------------------------------------------------------------

_manage_allocation_failure :
	mov			rax, 0
	pop			r14
	pop			r13
	ret
;======================================================================
	
;======================================================================
_ft_strlen:
	mov			rax, -1
	mov			rdx, 0
	call		_check_end_str
	ret

_check_end_str:
	inc			rax
	mov			dl, byte[rdi + rax]
	cmp			dl, 0
	jne			_check_end_str
	ret
;======================================================================

;======================================================================
_ft_strcpy:
	mov			rcx, -1
	mov			rax, 0
	call		_copy
	mov			rax, rdi
	ret

_copy:
	inc			rcx
	mov			al, byte[rsi + rcx]
	mov			byte[rdi + rcx], al
	cmp			al, 0
	jne			_copy
	ret
;======================================================================


;	8 if not aligned | 0 otherwise
;======================================================================
_get_alignment_offset :
;	store the rsp % 16 in rax
;----------------------------------------------------------------------
	mov			rdx, 0
	mov			rax, rsp
	mov			rcx, 16
	div			rcx
;----------------------------------------------------------------------

;	rax == 0 -> not aligned (return address of align_stack)
;----------------------------------------------------------------------
	cmp			rdx, 0
	je			_update_offset
	mov			rax, 0
	ret
;----------------------------------------------------------------------

_update_offset :
	mov			rax, 8
	ret
;======================================================================
