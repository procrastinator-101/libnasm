section .text

global _ft_list_sort

;void	ft_list_sort(t_list **begin_list, int (*cmp)());
;======================================================================
_ft_list_sort :
;check if the arguments are valid
;----------------------------------------------------------------------
	cmp			rdi, 0					;check if the begin_list is null
	je			_quit
	cmp			qword[rdi], 0			;check if the list is empty
	je			_quit
	cmp			rdx, 0					;check if cmp is null
	je			_quit
;----------------------------------------------------------------------
	
;preserve the neccessary registers
;----------------------------------------------------------------------
	push		
	push		r12
	push		r13
	push		r14
	push		r15
;----------------------------------------------------------------------

;----------------------------------------------------------------------
	mov			r12, rdi			;hold the begin_list
	mov			r13, [rdi]			;hold the current elem
	mov			r14, rsi			;hold the cmp pointer
	mov			r15, 0				;hold the previous elem
;----------------------------------------------------------------------

;----------------------------------------------------------------------
	call		_ft_bubble_sort
;----------------------------------------------------------------------
;======================================================================


;======================================================================
_ft_bubble_sort :
;----------------------------------------------------------------------
	cmp			r13, 0				;check if the end of the list is reached
	je			_return
;----------------------------------------------------------------------
;----------------------------------------------------------------------
	mov			rdi,[r13]			;store current elem.data in rdi
	mov			rsi, [r13 + 8]		
	push		rsi					;save the next elem on the stack
	mov			rsi, [rsi]			;store the next elem.data in rsi
;----------------------------------------------------------------------

;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
;	align the stack
;----------------------------------------------------------------------
	push		r12
	call		_get_alignment_offset
	mov			r12, rax
	sub			rsp, rax
;----------------------------------------------------------------------
	call		r14
;----------------------------------------------------------------------
	add			rsp, r12
	pop			r12
;----------------------------------------------------------------------
;IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII

;----------------------------------------------------------------------
	pop			rdi
	cmp			rax, 0
	jg			_ft_swap_elem
;----------------------------------------------------------------------

;----------------------------------------------------------------------
	mov			r15, r13			;update the previous elem
	mov			r13, [r13 + 8]		;update the current elem
;----------------------------------------------------------------------
	call		_ft_bubble_sort
;======================================================================


;======================================================================
_ft_swap_elem :
;----------------------------------------------------------------------
	cmp			r13, [r12]			;check if the current elem is the tail of the list
	je			_ft_swap_tail
;----------------------------------------------------------------------
;----------------------------------------------------------------------
	mov			[r15 + 8], rdi		;update the previous elem'next
	mov			rdx, [rdi + 8]
	mov			[r13 + 8], rdx		;update the current elem'next
	mov			[rdi + 8], r13		;update the next elem'next
;----------------------------------------------------------------------
;----------------------------------------------------------------------
	mov			r15, rdi			;update the previous elem
;----------------------------------------------------------------------
	ret
;======================================================================

_ft_swap_tail :
;======================================================================
	mov			[r12], rdi			;update the tail of the list
	mov			[rdi + 8], r13		;update the tail'next
	mov			r15, rdi			;update the previous elem
;======================================================================
